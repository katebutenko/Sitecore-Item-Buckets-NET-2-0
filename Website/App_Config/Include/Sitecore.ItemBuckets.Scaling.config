<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/">
  <sitecore>
    <databases>
      <database id="web" singleInstance="true" type="Sitecore.Data.Database, Sitecore.Kernel">
        <Engines.DataEngine.Commands.AddFromTemplatePrototype>
          <obj type="Sitecore.ItemBucket.Kernel.Commands.AddFromTemplateCommand, Sitecore.ItemBucket.Kernel" />
        </Engines.DataEngine.Commands.AddFromTemplatePrototype>
        <!--<cacheSizes hint="setting">
          <data>100MB</data>
          <items>100MB</items>
          <paths>4MB</paths>
          <standardValues>4MB</standardValues>
        </cacheSizes>-->
      </database>
      <!--<database id="web" singleInstance="true" type="Sitecore.Data.Database, Sitecore.Kernel">
        <cacheSizes hint="setting">
          <data>20MB</data>
          <items>20MB</items>
          <paths>4MB</paths>
          <standardValues>4MB</standardValues>
        </cacheSizes>
      </database>-->
    </databases>
    <!-- This allows the CM Server to have index rebuilds run on a remote machine and then copy the indexes back
           into the default Index directory when finished.
           Use: value="\\NetworkServerName\Directory\SubDirectory
      -->
    <search>
      <inmemoryconfiguration type="Sitecore.ItemBuckets.BigData.RamDirectory.SearchConfiguration, Sitecore.BigData" singleInstance="true">
        <indexes hint="list:AddIndex">
          <index id="itembuckets_buckets_inmemory" type="Sitecore.ItemBuckets.BigData.RamDirectory.InMemoryIndex, Sitecore.BigData">
            <param desc="name">$(id)</param>
            <param desc="folder">itembuckets_buckets_inmemory</param>
            <Analyzer ref="search/analyzer" />
            <locations hint="list:AddCrawler">
              <ItemBucketSearch type="Sitecore.ItemBucket.BigData.Crawlers.RamCrawler,Sitecore.BigData">
                <Database>master</Database>
                <Root>/sitecore/system/Tasks</Root>
                <IndexAllFields>true</IndexAllFields>
              </ItemBucketSearch>
            </locations>
          </index>
        </indexes>
      </inmemoryconfiguration>
    </search>
    <!-- If you would like your indexes to be rebuilt on a remote indexing server then implement it like below. You cannot have the same index as a remote index and a 
         standard index.
      -->
    <search>
      <remoteconfiguration type="Sitecore.ItemBuckets.BigData.RamDirectory.RemoteIndexSearchConfiguration, Sitecore.BigData" singleInstance="true">
        <indexes hint="list:AddIndex">
          <index id="itembuckets_buckets_remote" type="Sitecore.ItemBuckets.BigData.RemoteIndex.RemoteIndex, Sitecore.BigData">
            <param desc="name">$(id)</param>
            <param desc="folder">itembuckets_buckets_remote</param>
            <Analyzer ref="search/analyzer" />
            <locations hint="list:AddCrawler">
              <ItemBucketSearch type="Sitecore.ItemBucket.Kernel.Crawlers.RemoteCustomCrawler, Sitecore.ItemBucket.Kernel">
                <Database>master</Database>
                <Root>/sitecore/system/Tasks</Root>
                <IndexAllFields>true</IndexAllFields>
              </ItemBucketSearch>
            </locations>
          </index>
        </indexes>
      </remoteconfiguration>
    </search>
    <events>
      <!-- This allows the CM Server to have index rebuilds run on a remote machine and then copy the indexes back
           into the default Index directory when finished.
           Use: value="\\NetworkServerName\Directory\SubDirectory
      -->
      <event name="item:indexing:remotefinished"/>
      <event name="item:indexing:remotestarting"/>
    </events>
    <settings>
      <!-- This allows the CM Server to have a dedicated Query Server
           Use: value="http://queryserver
      -->
      <setting name="QueryServer" value=""/>

      <!-- This is the location on the Indexing Server where the indexes will be rebuilt.
           Use: value="c:\remote
      -->
      <setting name="RemoteIndexLocation" value="c:\remote"/>

      <!-- This is a read only drop location that the built indexes get moved to so otherservers can copy them into their local index
           directory.
           Use: value="\\NetworkServerName\Directory\SubDirectory
      -->
      <setting name="NetworkDropPoint" value="\\Tim-pc\c$\inetpub\wwwroot\newbucket\Website\Data\indexes"/>

      <!-- This is the method that is called from the Initiator to the dedicated indexing server to start the remote Rebuild      -->

      <setting name="RemoteIndexingServer" value="http://newbucket/sitecore modules/Shell/Sitecore/ItemBuckets/Rebuild.asmx/Build"/>

      <!-- When the indexes are remotely built and finished, before it initiates a copy back to the Initiator, it will tell that server to
           disable the History Engine.      -->

      <setting name="RemoteIndexingReceipt" value="http://newbucket/sitecore modules/Shell/Sitecore/ItemBuckets/Rebuild.asmx/Reciept"/>

      <!-- This allows the CM Server to have index rebuilds run on a remote machine and then copy the indexes back
           into the default Index directory when finished.
      -->

      <setting name="RemoteIndexingReceiptEnable" value="http://newbucket/sitecore modules/Shell/Sitecore/ItemBuckets/Rebuild.asmx/EnableIndexing"/>

      <!-- Once the copy is complete, this is the method that the Indexing server will use to tell the Initiator to start processing the History Engine.
           Use: value="\\NetworkServerName\Directory\SubDirectory
      -->

      <!--  SOLR is recommended for delivery environment, not authoring   -->
      <setting name="SOLREnabled" value="false"/>
      <setting name="SOLRServiceLocation" value="http://localhost:8983/solr"/>
    </settings>
  </sitecore>
</configuration>


